import argparse
from dork_generator import DorkGenerator
import re
import time

def sanitize_filename(query):
    """Convert query to safe filename"""
    return re.sub(r'[^\w\s-]', '', query).strip().replace(' ', '_')[:50]

def save_to_markdown(results, filename):
    """Save comprehensive results to markdown file"""
    
    # Statistics section
    stats = results['statistics']
    stats_section = f"- **Total Dorks in Database**: {stats['total_dorks']:,}\n"
    if 'dork_types' in stats:
        for dork_type, count in stats['dork_types'].items():
            stats_section += f"- **{dork_type} dorks**: {count}\n"
    
    # Components section
    components = results['components']
    components_section = ""
    for key, values in components.items():
        if values:
            components_section += f"- **{key}**: {', '.join(values)}\n"
        else:
            components_section += f"- **{key}**: None detected\n"
    
    content = f"""# Google Dorks for: "{results['query']}"

*Generated on {time.strftime('%Y-%m-%d %H:%M:%S')}*

## Database Statistics
{stats_section}

## Query Analysis
{components_section}

## Relevant Dorks from Database ({len(results['relevant_dorks'])})
{chr(10).join(f"- `{dork}`" for dork in results['relevant_dorks'])}

## Generated Dorks ({len(results['generated_dorks'])})
{chr(10).join(f"- `{dork}`" for dork in results['generated_dorks'])}

## All Dorks Combined ({len(results['relevant_dorks']) + len(results['generated_dorks'])} total)
{chr(10).join(f"- `{dork}`" for dork in results['relevant_dorks'] + results['generated_dorks'])}

## Usage Tips
1. **Copy any dork** above and paste into Google search
2. **Combine operators** for more specific results
3. **Use site:example.com** to target specific domains
4. **Be ethical** - only test on systems you own
5. **Rotate IPs** if doing extensive testing to avoid blocks

## Popular Dork Patterns
- `inurl:admin` - Find admin pages
- `filetype:sql` - Find database dumps  
- `intitle:"index of"` - Find directory listings
- `site:github.com "password"` - Find exposed credentials
- `intext:"username" "password"` - Find login pages

---

*Generated by Dork Generator using {stats['total_dorks']:,} dorks from your database*
"""

    with open(filename, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"Results saved to: {filename}")

def main():
    parser = argparse.ArgumentParser(description='Generate Google dorks from natural language queries')
    parser.add_argument('query', help='Your search query (e.g., "find wordpress config files")')
    parser.add_argument('--output', '-o', help='Output file name (optional)')
    parser.add_argument('--count', '-c', type=int, default=15, help='Number of dorks to generate (default: 15)')
    
    args = parser.parse_args()
    
    print("Initializing Dork Generator...")
    print("This may take a moment while we load your dork database...")
    
    # Initialize generator
    generator = DorkGenerator()
    
    # Generate dorks
    print(f"Generating dorks for: '{args.query}'")
    results = generator.generate_dorks(args.query)
    
    # Determine output filename
    if args.output:
        output_file = args.output
    else:
        safe_query = sanitize_filename(args.query)
        output_file = f"{safe_query}_dorks.md"
    
    # Ensure .md extension
    if not output_file.endswith('.md'):
        output_file += '.md'
    
    # Save results
    save_to_markdown(results, output_file)
    
    # Print summary
    print(f"\n=== GENERATION COMPLETE ===")
    print(f"Database: {results['statistics']['total_dorks']:,} total dorks")
    print(f"Found: {len(results['relevant_dorks'])} relevant dorks")
    print(f"Generated: {len(results['generated_dorks'])} new dorks")
    print(f"Total: {len(results['relevant_dorks']) + len(results['generated_dorks'])} dorks")
    print(f"Saved to: {output_file}")
    
    # Show top 5 dorks
    print(f"\nTop dorks:")
    all_dorks = results['relevant_dorks'] + results['generated_dorks']
    for i, dork in enumerate(all_dorks[:5], 1):
        print(f"  {i}. {dork}")

if __name__ == "__main__":
    main()